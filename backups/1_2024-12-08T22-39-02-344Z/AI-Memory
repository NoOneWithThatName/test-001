[SYSTEM OVERVIEW]
Project Name: Vue Tracker Platform
Created: 2024-12-08
Purpose: Generic page-templating system with multi-user support
Status: Requirements Reconstruction (Original requirements lost - see _DEV_NOTES)

[CORE REQUIREMENTS] (Reconstructed from implementation)
NOTE: This reconstruction was necessary due to AI's failure to save original requirements as instructed. 
The original requirements were lost after system restart. This represents our best effort to 
recover the system's intended functionality from existing code and structure.

1. System Architecture:
   - Vue.js-based frontend application
   - Vite as development server and build tool
   - Multi-user support with authentication
   - Component-based architecture
   - Responsive design principles

2. Core Features:
   - User authentication system
   - Dynamic page templating
   - Multi-user view isolation
   - Backup system with version control
   - Data persistence (SQLite/Firebase/MongoDB)

3. UI Components:
   - Fixed top navbar with:
     * Hamburger menu for sidebar control
     * Project branding
   - Collapsible sidebar with:
     * Pages section
     * Views section (dynamic)
     * Smooth transition animations
   - Main content area with:
     * Router-view integration
     * Default to Dashboard view
     * Responsive layout

4. Navigation System:
   - Vue Router implementation
   - Dashboard as default landing view
   - All undefined routes redirect to Dashboard
   - Dynamic route generation for user views

5. Data Management:
   - Local SQLite for development
   - Migratable to Firebase/MongoDB
   - User-specific data isolation
   - Backup system integration

[TEMPLATE SYSTEM]
1. template-SideBar:
   - Core template for sidebar functionality
   - Contains two primary element types:
     a. Page Links:
        * Standard navigation links
        * Pre-defined pages accessible to all users
        * Same structure for all users
        * Content varies per user
     
     b. View Links:
        * User-created links
        * Contained within 'Views' container (id: view-links)
        * Only visible/accessible to creating user
        * Other users cannot see, modify, or remove
        * Opens associated View Display when selected
        * Names must be generic/obfuscated (users can create same-named views)
        * No initial data source required (displays generic "no information" message)

2. template-ViewDisplay:
   - Template for displaying view content
   - Completely customizable by user
   - Created automatically when new View Link is added
   - One unique template per View Link
   - Private to creating user
   - Can display any data source configured by user
   - Examples:
     * User1's "Licenses" view might show Office 365 data
     * User2's "Licenses" view might show Symantec data
     * Same view name, different data, different users

[VIEW SYSTEM ARCHITECTURE]
1. View Creation:
   - User creates new View Link
   - System automatically generates:
     * Unique View identifier (obfuscated)
     * Associated View Display template
     * Entry in Views container
   
2. View Independence:
   - Each view is completely isolated per user
   - Multiple users can create same-named views
   - Each view maintains its own:
     * Data source configuration
     * Display preferences
     * Template customization

3. Data Handling:
   - Optional data source connection
   - Flexible data source types
   - Generic "no information" display when no data configured
   - User-specific data isolation

[SYSTEM COMMANDS]
- "backup the project": Creates sequential backup of code and database
- "list backups": Displays available backups for restoration
- "remove backup": Removes specific backup maintaining sequential integrity

[ARCHITECTURE]
1. Layout:
   - Fixed navbar (top)
   - Collapsible sidebar (left) with:
     * Page Links section
     * View Links section (dynamic)
   - Main content area (right)
   - Responsive breakpoints

2. View System:
   - User-specific views with private access
   - Generic routing for data isolation
   - Customizable data sources and display options
   - Dashboard is default view (redirects all undefined routes)

[CRITICAL NOTES]
- All backups must maintain sequential integrity
- Views are strictly user-isolated
- No external project references allowed
- Change logs and dev notes are date-specific
- All UI changes must maintain responsive design
- Authentication required for all data access
- Backup system must preserve data integrity

[AI BEHAVIOR INSTRUCTIONS]
1. Initialization:
   - Read this file (AI-Memory) at the start of every session
   - Review project structure and architecture before making changes
   - Verify all changes against these requirements

2. Code Management:
   - When a code update fails or is incorrect:
     a. Immediately revert/remove the failed code
     b. Document the revert in _DEV_NOTES with timestamp
     c. Only then proceed with new implementation
   - Maintain code cleanliness by not leaving failed implementations
   - Always verify changes align with architecture defined here

3. Documentation:
   - Log all significant changes in _CHANGE_LOG with timestamps
   - Update _DEV_NOTES with any issues or important decisions
   - Keep AI-Memory updated with new architectural decisions
   - Mark all reconstructed requirements clearly
   - Document any uncertainty for user verification

[VERSION CONTROL]
Last Updated: 2024-12-08 17:15
Status: Requirements Reconstruction
Note: This is a reconstructed requirements document. All items should be verified against original intent.
